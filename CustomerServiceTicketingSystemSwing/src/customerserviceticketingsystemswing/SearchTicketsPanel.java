package customerserviceticketingsystemswing;

import customerserviceticketingsystemswing.DAO.TicketManager;
import customerserviceticketingsystemswing.DAO.Ticket;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.List;
import java.util.stream.Collectors;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 *
 * @author Adimn
 */
public class SearchTicketsPanel extends javax.swing.JPanel {
    private TicketManager ticketManager;

    /**
     * Creates new form SearchTicketsPanel
     */
    public SearchTicketsPanel(TicketManager ticketManager) {
        this.ticketManager = ticketManager;
        initComponents();
        loadTickets();
        setUpSearchFunctionality();
    }
    public void loadTickets() {
        DefaultTableModel model = (DefaultTableModel) searchTable.getModel();
        model.setRowCount(0);
        
        for (Ticket ticket : ticketManager.getAllTickets()) {
            model.addRow(new Object[]{
                ticket.getTicketId(),
                ticket.getCustomerName(),
                ticket.getIssue(),
                ticket.getStatus()
            });
        }
    } 
    
    private void setUpSearchFunctionality() {
        searchTxtField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                filterTickets();
            }
        });
    }
    
    private void filterTickets() {
        String searchTerm = searchTxtField.getText().toLowerCase();
        List<Ticket> filteredTickets = ticketManager.getAllTickets().stream()
                .filter(ticket -> ticket.getTicketId().toLowerCase().contains(searchTerm) ||
                                  ticket.getCustomerName().toLowerCase().contains(searchTerm) ||
                                  ticket.getIssue().toLowerCase().contains(searchTerm))
                .collect(Collectors.toList());

       DefaultTableModel model = (DefaultTableModel) searchTable.getModel();
       model.setRowCount(0); // Clear existing rows

        if (filteredTickets.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No tickets found matching your search criteria.", 
                                          "Search Result", JOptionPane.INFORMATION_MESSAGE);
        } else {
            for (Ticket ticket : filteredTickets) {
                model.addRow(new Object[]{
                    ticket.getTicketId(),
                    ticket.getCustomerName(),
                    ticket.getIssue(),
                    ticket.getStatus()
                });
            }
        }        
    }
    private void searchButtonActionPerformed(ActionEvent evt) {
        String searchTerm = searchTxtField.getText().toLowerCase();
        List<Ticket> filteredTickets = ticketManager.getAllTickets().stream()
                .filter(ticket -> ticket.getCustomerName().toLowerCase().startsWith(searchTerm))
                .collect(Collectors.toList());
        
        DefaultTableModel model = (DefaultTableModel) searchTable.getModel();
        model.setRowCount(0);
        
        for (Ticket ticket : filteredTickets) {
            model.addRow(new Object[]{
                ticket.getTicketId(),
                ticket.getCustomerName(),
                ticket.getIssue(),
                ticket.getStatus()
            });
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        searchTxtField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        searchTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(204, 204, 255));

        jLabel1.setBackground(new java.awt.Color(204, 204, 255));
        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("Search Ticket");

        searchTxtField.setBackground(new java.awt.Color(242, 242, 242));
        searchTxtField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        searchTxtField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        searchTxtField.setText("Search Ticket");

        searchButton.setBackground(new java.awt.Color(153, 153, 255));
        searchButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        searchButton.setText("Search");

        searchTable.setBackground(new java.awt.Color(242, 242, 242));
        searchTable.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        searchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Ticket ID", "Customer Name", "Issue", "Status"
            }
        ));
        searchTable.setRowHeight(75);
        jScrollPane1.setViewportView(searchTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(236, 236, 236)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchTxtField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(searchButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 736, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(searchTxtField)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton searchButton;
    private javax.swing.JTable searchTable;
    private javax.swing.JTextField searchTxtField;
    // End of variables declaration//GEN-END:variables
}
